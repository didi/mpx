(window.webpackJsonp=window.webpackJsonp||[]).push([[59],{407:function(v,_,t){"use strict";t.r(_);var d=t(4),e=Object(d.a)({},(function(){var v=this,_=v._self._c;return _("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[_("h1",{attrs:{id:"小程序框架运行时性能大测评"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#小程序框架运行时性能大测评"}},[v._v("#")]),v._v(" 小程序框架运行时性能大测评")]),v._v(" "),_("blockquote",[_("p",[v._v("作者：董宏平("),_("a",{attrs:{href:"https://github.com/hiyuki",target:"_blank",rel:"noopener noreferrer"}},[v._v("hiyuki"),_("OutboundLink")],1),v._v(")，滴滴出行小程序负责人，mpx框架负责人及核心作者")])]),v._v(" "),_("p",[v._v("随着小程序在商业上的巨大成功，小程序开发在国内前端领域越来越受到重视，为了方便广大开发者更好地进行小程序开发，各类小程序框架也层出不穷，呈现出百花齐放的态势。但是到目前为止，业内一直没有出现一份全面、详细、客观、公正的小程序框架测评报告，为小程序开发者在技术选型时提供参考。于是我便筹划推出一系列文章，对业内流行的小程序框架进行一次全方位的、客观公正的测评，本文是系列文章的第一篇——运行时性能篇。")]),v._v(" "),_("p",[v._v("在本文中，我们会对下列框架进行运行时性能测试(排名不分先后):")]),v._v(" "),_("ul",[_("li",[v._v("wepy2(https://github.com/Tencent/wepy) @2.0.0-alpha.20")]),v._v(" "),_("li",[v._v("uniapp(https://github.com/dcloudio/uni-app) @2.0.0-26120200226001")]),v._v(" "),_("li",[v._v("mpx(https://github.com/didi/mpx) @2.5.3")]),v._v(" "),_("li",[v._v("chameleon(https://github.com/didi/chameleon) @1.0.5")]),v._v(" "),_("li",[v._v("mpvue(https://github.com/Meituan-Dianping/mpvue) @2.0.6")]),v._v(" "),_("li",[v._v("kbone(https://github.com/Tencent/kbone) @0.8.3")]),v._v(" "),_("li",[v._v("taro next(https://github.com/NervJS/taro) @3.0.0-alpha.5")])]),v._v(" "),_("p",[v._v("其中对于kbone和taro next均以vue作为业务框架进行测试。")]),v._v(" "),_("p",[v._v("运行时性能的测试内容包括以下几个维度：")]),v._v(" "),_("ul",[_("li",[v._v("框架运行时体积")]),v._v(" "),_("li",[v._v("页面渲染耗时")]),v._v(" "),_("li",[v._v("页面更新耗时")]),v._v(" "),_("li",[v._v("局部更新耗时")]),v._v(" "),_("li",[v._v("setData调用次数")]),v._v(" "),_("li",[v._v("setData发送数据大小")])]),v._v(" "),_("p",[v._v("框架性能测试demo全部存放于https://github.com/hiyuki/mp-framework-benchmark 中，欢迎广大开发者进行验证纠错及补全；")]),v._v(" "),_("h2",{attrs:{id:"测试方案"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#测试方案"}},[v._v("#")]),v._v(" 测试方案")]),v._v(" "),_("p",[v._v("为了使测试结果真实有效，我基于常见的业务场景构建了两种测试场景，分别是动态测试场景和静态测试场景。")]),v._v(" "),_("h3",{attrs:{id:"动态测试场景"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#动态测试场景"}},[v._v("#")]),v._v(" 动态测试场景")]),v._v(" "),_("p",[v._v("动态测试中，视图基于数据动态渲染，静态节点较少，视图更新耗时和setData调用情况是该测试场景中的主要测试点。")]),v._v(" "),_("p",[v._v("动态测试demo模拟了实际业务中常见的长列表+多tab场景，该demo中存在两份优惠券列表数据，一份为可用券数据，另一份为不可用券数据，其中同一时刻视图中只会渲染展示其中一份数据，可以在上方的操作区模拟对列表数据的各种操作及视图展示切换(切tab)。")]),v._v(" "),_("p",[_("img",{attrs:{src:"https://dpubstatic.udache.com/static/dpubimg/PWsGL0GkuQ/dynamic.jpeg",width:"300px"}})]),v._v(" "),_("p",[_("em",[v._v("动态测试demo")])]),v._v(" "),_("p",[v._v("在动态测试中，我在外部通过函数代理的方式在初始化之前将App、Page和Component构造器进行代理，通过mixin的方式在Page的onLoad和Component的created钩子中注入setData拦截逻辑，对所有页面和组件的setData调用进行监听，并统计小程序的视图更新耗时及setData调用情况。该测试方式能够做到对框架代码的零侵入，能够跟踪到小程序全量的setData行为并进行独立的耗时计算，具有很强的普适性，代码具体实现可以查看https://github.com/hiyuki/mp-framework-benchmark/blob/master/utils/proxy.js")]),v._v(" "),_("h3",{attrs:{id:"静态测试场景"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#静态测试场景"}},[v._v("#")]),v._v(" 静态测试场景")]),v._v(" "),_("p",[v._v("静态测试模拟业务中静态页面的场景，如运营活动和文章等页面，页面内具备大量的静态节点，而没有数据动态渲染，初始ready耗时是该场景下测试的重心。")]),v._v(" "),_("p",[v._v("静态测试demo使用了我去年发表的一篇技术文章的html代码进行小程序适配构建，其中包含大量静态节点及文本内容。")]),v._v(" "),_("p",[_("img",{attrs:{src:"https://dpubstatic.udache.com/static/dpubimg/5TOToHvunN/static.jpeg",width:"300px"}})]),v._v(" "),_("p",[_("em",[v._v("静态测试demo")])]),v._v(" "),_("h2",{attrs:{id:"测试流程及数据"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#测试流程及数据"}},[v._v("#")]),v._v(" 测试流程及数据")]),v._v(" "),_("blockquote",[_("p",[v._v("以下所有耗时类的测试数据均为微信小程序中真机进行5次测试计算平均值得出，单位均为ms。Ios测试环境为手机型号iPhone 11，系统版本13.3.1，微信版本7.0.12，安卓测试环境为手机型号小米9，系统版本Android10，微信版本7.0.12。")])]),v._v(" "),_("blockquote",[_("p",[v._v("为了使数据展示不过于混乱复杂，文章中所列的数据以Ios的测试结果为主，安卓测试结论与Ios相符，整体耗时比Ios高3~4倍左右，所有的原始测试数据存放在https://github.com/hiyuki/mp-framework-benchmark/blob/master/rawData.csv")])]),v._v(" "),_("blockquote",[_("p",[v._v("由于transform-runtime引入的core-js会对框架的运行时体积和运行耗时带来一定影响，且不是所有的框架都会在编译时开启transform-runtime，为了对齐测试环境，下述测试均在transform-runtime关闭时进行。")])]),v._v(" "),_("h3",{attrs:{id:"框架运行时体积"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#框架运行时体积"}},[v._v("#")]),v._v(" 框架运行时体积")]),v._v(" "),_("p",[v._v("由于不是所有框架都能够使用"),_("code",[v._v("webpack-bundle-analyzer")]),v._v("得到精确的包体积占用，这里我通过将各框架生成的demo项目体积减去native编写的demo项目体积作为框架的运行时体积。")]),v._v(" "),_("table",[_("thead",[_("tr",[_("th"),v._v(" "),_("th",[v._v("demo总体积(KB)")]),v._v(" "),_("th",[v._v("框架运行时体积(KB)")])])]),v._v(" "),_("tbody",[_("tr",[_("td",[v._v("native")]),v._v(" "),_("td",[v._v("27")]),v._v(" "),_("td",[v._v("0")])]),v._v(" "),_("tr",[_("td",[v._v("wepy2")]),v._v(" "),_("td",[v._v("66")]),v._v(" "),_("td",[v._v("39")])]),v._v(" "),_("tr",[_("td",[v._v("uniapp")]),v._v(" "),_("td",[v._v("114")]),v._v(" "),_("td",[v._v("87")])]),v._v(" "),_("tr",[_("td",[v._v("mpx")]),v._v(" "),_("td",[v._v("78")]),v._v(" "),_("td",[v._v("51")])]),v._v(" "),_("tr",[_("td",[v._v("chameleon")]),v._v(" "),_("td",[v._v("136")]),v._v(" "),_("td",[v._v("109")])]),v._v(" "),_("tr",[_("td",[v._v("mpvue")]),v._v(" "),_("td",[v._v("103")]),v._v(" "),_("td",[v._v("76")])]),v._v(" "),_("tr",[_("td",[v._v("kbone")]),v._v(" "),_("td",[v._v("395")]),v._v(" "),_("td",[v._v("368")])]),v._v(" "),_("tr",[_("td",[v._v("taro next")]),v._v(" "),_("td",[v._v("183")]),v._v(" "),_("td",[v._v("156")])])])]),v._v(" "),_("p",[v._v("该项测试的结论为："),_("br"),v._v("\nnative > wepy2 > mpx > mpvue > uniapp > chameleon > taro next > kbone")]),v._v(" "),_("p",[v._v("结论分析：")]),v._v(" "),_("ul",[_("li",[v._v("wepy2和mpx在框架运行时体积上控制得最好；")]),v._v(" "),_("li",[v._v("taro next和kbone由于动态渲染的特性，在dist中会生成递归渲染模板/组件，所以占用体积较大。")])]),v._v(" "),_("h3",{attrs:{id:"页面渲染耗时-动态测试"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#页面渲染耗时-动态测试"}},[v._v("#")]),v._v(" 页面渲染耗时(动态测试)")]),v._v(" "),_("p",[v._v("我们使用"),_("code",[v._v("刷新页面")]),v._v("操作触发页面重新加载，对于大部分框架来说，页面渲染耗时是从触发刷新操作到页面执行onReady的耗时，但是对于像kbone和taro next这样的动态渲染框架，页面执行onReady并不代表视图真正渲染完成，为此，我们设定了一个特殊规则，在页面onReady触发的1000ms内，在没有任何操作的情况下出现setData回调时，以最后触发的setData回调作为页面渲染完成时机来计算真实的页面渲染耗时，测试结果如下：")]),v._v(" "),_("table",[_("thead",[_("tr",[_("th"),v._v(" "),_("th",[v._v("页面渲染耗时")])])]),v._v(" "),_("tbody",[_("tr",[_("td",[v._v("native")]),v._v(" "),_("td",[v._v("60.8")])]),v._v(" "),_("tr",[_("td",[v._v("wepy2")]),v._v(" "),_("td",[v._v("64")])]),v._v(" "),_("tr",[_("td",[v._v("uniapp")]),v._v(" "),_("td",[v._v("56.4")])]),v._v(" "),_("tr",[_("td",[v._v("mpx")]),v._v(" "),_("td",[v._v("52.6")])]),v._v(" "),_("tr",[_("td",[v._v("chameleon")]),v._v(" "),_("td",[v._v("56.4")])]),v._v(" "),_("tr",[_("td",[v._v("mpvue")]),v._v(" "),_("td",[v._v("117.8")])]),v._v(" "),_("tr",[_("td",[v._v("kbone")]),v._v(" "),_("td",[v._v("98.6")])]),v._v(" "),_("tr",[_("td",[v._v("taro next")]),v._v(" "),_("td",[v._v("89.6")])])])]),v._v(" "),_("blockquote",[_("p",[v._v("该项测试的耗时并不等同于真实的渲染耗时，由于小程序自身没有提供performance api，真实渲染耗时无法通过js准确测试得出，不过从得出的数据来看该项数据依然具备一定的参考意义。")])]),v._v(" "),_("p",[v._v("该项测试的结论为："),_("br"),v._v("\nmpx ≈ chameleon ≈ uniapp ≈ native ≈ wepy2 > taro next ≈ kbone ≈ mpvue")]),v._v(" "),_("p",[v._v("结论分析：")]),v._v(" "),_("ul",[_("li",[v._v("由于mpvue全量在页面进行渲染，kbone和taro next采用了动态渲染技术，页面渲染耗时较长，其余框架并无太大区别。")])]),v._v(" "),_("h3",{attrs:{id:"页面更新耗时-无后台数据"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#页面更新耗时-无后台数据"}},[v._v("#")]),v._v(" 页面更新耗时(无后台数据)")]),v._v(" "),_("p",[v._v("这里后台数据的定义为data中存在但当前页面渲染中未使用到的数据，在这个demo场景下即为不可用券的数据，当前会在不可用券为0的情况下，对可用券列表进行各种操作，并统计更新耗时。")]),v._v(" "),_("p",[v._v("更新耗时的计算方式是从数据操作事件触发开始到对应的setData回调完成的耗时")]),v._v(" "),_("blockquote",[_("p",[v._v("mpvue中使用了当前时间戳(new Date)作为超时依据对setData进行了超时时间为50ms的节流操作，该方式存在严重问题，当vue内单次渲染同步流程执行耗时超过50ms时，后续组件patch触发的setData会突破这个节流限制，以50ms每次的频率对setData进行高频无效调用。在该性能测试demo中，当优惠券数量超过500时，界面就会完全卡死。为了顺利跑完整个测试流程，我对该问题进行了简单修复，使用setTimeout重写了节流部分，确保在vue单次渲染流程同步执行完毕后才会调用setData发送合并数据，之后mpvue的所有性能测试都是基于这个patch版本来进行的，该patch版本存放在https://github.com/hiyuki/mp-framework-benchmark/blob/master/frameworks/mpvue/runtime/patch/index.js")])]),v._v(" "),_("blockquote",[_("p",[v._v("理论上来讲native的性能在进行优化的前提下一定是所有框架的天花板，但是在日常业务开发中我们可能无法对每一次setData都进行优化，以下性能测试中所有的native数据均采用修改数据后全量发送的形式来实现。")])]),v._v(" "),_("p",[v._v("第一项测试我们使用"),_("code",[v._v("新增可用券(100)")]),v._v("操作将可用券数量由0逐级递增到1000：")]),v._v(" "),_("table",[_("thead",[_("tr",[_("th"),v._v(" "),_("th",[v._v("100")]),v._v(" "),_("th",[v._v("200")]),v._v(" "),_("th",[v._v("300")]),v._v(" "),_("th",[v._v("400")]),v._v(" "),_("th",[v._v("500")]),v._v(" "),_("th",[v._v("600")]),v._v(" "),_("th",[v._v("700")]),v._v(" "),_("th",[v._v("800")]),v._v(" "),_("th",[v._v("900")]),v._v(" "),_("th",[v._v("1000")])])]),v._v(" "),_("tbody",[_("tr",[_("td",[v._v("native")]),v._v(" "),_("td",[v._v("84.6")]),v._v(" "),_("td",[v._v("69.8")]),v._v(" "),_("td",[v._v("71.6")]),v._v(" "),_("td",[v._v("75")]),v._v(" "),_("td",[v._v("77.2")]),v._v(" "),_("td",[v._v("78.8")]),v._v(" "),_("td",[v._v("82.8")]),v._v(" "),_("td",[v._v("93.2")]),v._v(" "),_("td",[v._v("93.4")]),v._v(" "),_("td",[v._v("105.4")])]),v._v(" "),_("tr",[_("td",[v._v("wepy2")]),v._v(" "),_("td",[v._v("118.4")]),v._v(" "),_("td",[v._v("168.6")]),v._v(" "),_("td",[v._v("204.6")]),v._v(" "),_("td",[v._v("246.4")]),v._v(" "),_("td",[v._v("288.6")]),v._v(" "),_("td",[v._v("347.8")]),v._v(" "),_("td",[v._v("389.2")]),v._v(" "),_("td",[v._v("434.2")]),v._v(" "),_("td",[v._v("496")]),v._v(" "),_("td",[v._v("539")])]),v._v(" "),_("tr",[_("td",[v._v("uniapp")]),v._v(" "),_("td",[v._v("121.2")]),v._v(" "),_("td",[v._v("100")]),v._v(" "),_("td",[v._v("96")]),v._v(" "),_("td",[v._v("98.2")]),v._v(" "),_("td",[v._v("97.8")]),v._v(" "),_("td",[v._v("99.6")]),v._v(" "),_("td",[v._v("104")]),v._v(" "),_("td",[v._v("102.4")]),v._v(" "),_("td",[v._v("109.4")]),v._v(" "),_("td",[v._v("107.6")])]),v._v(" "),_("tr",[_("td",[v._v("mpx")]),v._v(" "),_("td",[v._v("110.4")]),v._v(" "),_("td",[v._v("87.2")]),v._v(" "),_("td",[v._v("82.2")]),v._v(" "),_("td",[v._v("83")]),v._v(" "),_("td",[v._v("80.6")]),v._v(" "),_("td",[v._v("79.6")]),v._v(" "),_("td",[v._v("86.6")]),v._v(" "),_("td",[v._v("90.6")]),v._v(" "),_("td",[v._v("89.2")]),v._v(" "),_("td",[v._v("96.4")])]),v._v(" "),_("tr",[_("td",[v._v("chameleon")]),v._v(" "),_("td",[v._v("116.8")]),v._v(" "),_("td",[v._v("115.4")]),v._v(" "),_("td",[v._v("117")]),v._v(" "),_("td",[v._v("119.6")]),v._v(" "),_("td",[v._v("122")]),v._v(" "),_("td",[v._v("125.2")]),v._v(" "),_("td",[v._v("133.8")]),v._v(" "),_("td",[v._v("133.2")]),v._v(" "),_("td",[v._v("144.8")]),v._v(" "),_("td",[v._v("145.6")])]),v._v(" "),_("tr",[_("td",[v._v("mpvue")]),v._v(" "),_("td",[v._v("112.8")]),v._v(" "),_("td",[v._v("121.2")]),v._v(" "),_("td",[v._v("140")]),v._v(" "),_("td",[v._v("169")]),v._v(" "),_("td",[v._v("198.8")]),v._v(" "),_("td",[v._v("234.2")]),v._v(" "),_("td",[v._v("278.8")]),v._v(" "),_("td",[v._v("318.4")]),v._v(" "),_("td",[v._v("361.4")]),v._v(" "),_("td",[v._v("408.2")])]),v._v(" "),_("tr",[_("td",[v._v("kbone")]),v._v(" "),_("td",[v._v("556.4")]),v._v(" "),_("td",[v._v("762.4")]),v._v(" "),_("td",[v._v("991.6")]),v._v(" "),_("td",[v._v("1220.6")]),v._v(" "),_("td",[v._v("1468.8")]),v._v(" "),_("td",[v._v("1689.6")]),v._v(" "),_("td",[v._v("1933.2")]),v._v(" "),_("td",[v._v("2150.4")]),v._v(" "),_("td",[v._v("2389")]),v._v(" "),_("td",[v._v("2620.6")])]),v._v(" "),_("tr",[_("td",[v._v("taro next")]),v._v(" "),_("td",[v._v("470")]),v._v(" "),_("td",[v._v("604.6")]),v._v(" "),_("td",[v._v("759.6")]),v._v(" "),_("td",[v._v("902.4")]),v._v(" "),_("td",[v._v("1056.2")]),v._v(" "),_("td",[v._v("1228")]),v._v(" "),_("td",[v._v("1393.4")]),v._v(" "),_("td",[v._v("1536.2")]),v._v(" "),_("td",[v._v("1707.8")]),v._v(" "),_("td",[v._v("1867.2")])])])]),v._v(" "),_("p",[v._v("然后我们按顺序逐项点击"),_("code",[v._v("删除可用券(all)")]),v._v(" > "),_("code",[v._v("新增可用券(1000)")]),v._v(" > "),_("code",[v._v("更新可用券(1)")]),v._v(" > "),_("code",[v._v("更新可用券(all)")]),v._v(" > "),_("code",[v._v("删除可用券(1)")]),v._v("：")]),v._v(" "),_("table",[_("thead",[_("tr",[_("th"),v._v(" "),_("th",[v._v("delete(all)")]),v._v(" "),_("th",[v._v("add(1000)")]),v._v(" "),_("th",[v._v("update(1)")]),v._v(" "),_("th",[v._v("update(all)")]),v._v(" "),_("th",[v._v("delete(1)")])])]),v._v(" "),_("tbody",[_("tr",[_("td",[v._v("native")]),v._v(" "),_("td",[v._v("32.8")]),v._v(" "),_("td",[v._v("295.6")]),v._v(" "),_("td",[v._v("92.2")]),v._v(" "),_("td",[v._v("92.2")]),v._v(" "),_("td",[v._v("83")])]),v._v(" "),_("tr",[_("td",[v._v("wepy2")]),v._v(" "),_("td",[v._v("56.8")]),v._v(" "),_("td",[v._v("726.4")]),v._v(" "),_("td",[v._v("49.2")]),v._v(" "),_("td",[v._v("535")]),v._v(" "),_("td",[v._v("530.8")])]),v._v(" "),_("tr",[_("td",[v._v("uniapp")]),v._v(" "),_("td",[v._v("43.6")]),v._v(" "),_("td",[v._v("584.4")]),v._v(" "),_("td",[v._v("54.8")]),v._v(" "),_("td",[v._v("144.8")]),v._v(" "),_("td",[v._v("131.2")])]),v._v(" "),_("tr",[_("td",[v._v("mpx")]),v._v(" "),_("td",[v._v("41.8")]),v._v(" "),_("td",[v._v("489.6")]),v._v(" "),_("td",[v._v("52.6")]),v._v(" "),_("td",[v._v("169.4")]),v._v(" "),_("td",[v._v("165.6")])]),v._v(" "),_("tr",[_("td",[v._v("chameleon")]),v._v(" "),_("td",[v._v("39")]),v._v(" "),_("td",[v._v("765.6")]),v._v(" "),_("td",[v._v("95.6")]),v._v(" "),_("td",[v._v("237.8")]),v._v(" "),_("td",[v._v("144.8")])]),v._v(" "),_("tr",[_("td",[v._v("mpvue")]),v._v(" "),_("td",[v._v("103.6")]),v._v(" "),_("td",[v._v("669.4")]),v._v(" "),_("td",[v._v("404.4")]),v._v(" "),_("td",[v._v("414.8")]),v._v(" "),_("td",[v._v("433.6")])]),v._v(" "),_("tr",[_("td",[v._v("kbone")]),v._v(" "),_("td",[v._v("120.2")]),v._v(" "),_("td",[v._v("4978")]),v._v(" "),_("td",[v._v("2356.4")]),v._v(" "),_("td",[v._v("2419.4")]),v._v(" "),_("td",[v._v("2357")])]),v._v(" "),_("tr",[_("td",[v._v("taro next")]),v._v(" "),_("td",[v._v("126.6")]),v._v(" "),_("td",[v._v("3930.6")]),v._v(" "),_("td",[v._v("1607.8")]),v._v(" "),_("td",[v._v("1788.6")]),v._v(" "),_("td",[v._v("2318.2")])])])]),v._v(" "),_("blockquote",[_("p",[v._v("该项测试中初期我update(all)的逻辑是循环对每个列表项进行更新，形如"),_("code",[v._v("listData.forEach((item)=>{item.count++})")]),v._v("，发现在chameleon框架中执行界面会完全卡死，追踪发现chameleon框架中没有对setData进行异步合并处理，而是在数据变动时直接同步发送，这样在数据量为1000的场景下用该方式进行更新会高频触发1000次setData，导致界面卡死；对此，我在chameleon框架的测试demo中，将update(all)的逻辑调整为深clone产生一份更新后的listData，再将其整体赋值到this.listData当中，以确保该项测试能够正常进行。")])]),v._v(" "),_("p",[v._v("该项测试的结论为："),_("br"),v._v("\nnative > mpx ≈ uniapp > chameleon > mpvue > wepy2 > taro next > kbone")]),v._v(" "),_("p",[v._v("结论分析：")]),v._v(" "),_("ul",[_("li",[v._v("mpx和uniapp在框架内部进行了完善的diff优化，随着数据量的增加，两个框架的新增耗时没有显著上升；")]),v._v(" "),_("li",[v._v("wepy2会在数据变更时对props数据也进行setData，在该场景下造成了大量的无效性能损耗，导致性能表现不佳；")]),v._v(" "),_("li",[v._v("kbone和taro next采用了动态渲染方案，每次新增更新时会发送大量描述dom结构的数据，与此同时动态递归渲染的耗时也远大于常规的静态模板渲染，使得这两个框架在所有的更新场景下耗时都远大于其他框架。")])]),v._v(" "),_("h3",{attrs:{id:"页面更新耗时-有后台数据"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#页面更新耗时-有后台数据"}},[v._v("#")]),v._v(" 页面更新耗时(有后台数据)")]),v._v(" "),_("p",[v._v("刷新页面后我们使用"),_("code",[v._v("新增不可用券(1000)")]),v._v("创建后台数据，观察该操作是否会触发setData并统计耗时")]),v._v(" "),_("table",[_("thead",[_("tr",[_("th"),v._v(" "),_("th",[v._v("back add(1000)")])])]),v._v(" "),_("tbody",[_("tr",[_("td",[v._v("native")]),v._v(" "),_("td",[v._v("45.2")])]),v._v(" "),_("tr",[_("td",[v._v("wepy2")]),v._v(" "),_("td",[v._v("174.6")])]),v._v(" "),_("tr",[_("td",[v._v("uniapp")]),v._v(" "),_("td",[v._v("89.4")])]),v._v(" "),_("tr",[_("td",[v._v("mpx")]),v._v(" "),_("td",[v._v("0")])]),v._v(" "),_("tr",[_("td",[v._v("chameleon")]),v._v(" "),_("td",[v._v("142.6")])]),v._v(" "),_("tr",[_("td",[v._v("mpvue")]),v._v(" "),_("td",[v._v("134")])]),v._v(" "),_("tr",[_("td",[v._v("kbone")]),v._v(" "),_("td",[v._v("0")])]),v._v(" "),_("tr",[_("td",[v._v("taro next")]),v._v(" "),_("td",[v._v("0")])])])]),v._v(" "),_("blockquote",[_("p",[v._v("mpx进行setData优化时inspired by vue，使用了编译时生成的渲染函数跟踪模板数据依赖，在后台数据变更时不会进行setData调用，而kbone和taro next采用了动态渲染技术模拟了web底层环境，在上层完整地运行了vue框架，也达到了同样的效果。")])]),v._v(" "),_("p",[v._v("然后我们执行和上面无后台数据时相同的操作进行耗时统计，首先是递增100：")]),v._v(" "),_("table",[_("thead",[_("tr",[_("th"),v._v(" "),_("th",[v._v("100")]),v._v(" "),_("th",[v._v("200")]),v._v(" "),_("th",[v._v("300")]),v._v(" "),_("th",[v._v("400")]),v._v(" "),_("th",[v._v("500")]),v._v(" "),_("th",[v._v("600")]),v._v(" "),_("th",[v._v("700")]),v._v(" "),_("th",[v._v("800")]),v._v(" "),_("th",[v._v("900")]),v._v(" "),_("th",[v._v("1000")])])]),v._v(" "),_("tbody",[_("tr",[_("td",[v._v("native")]),v._v(" "),_("td",[v._v("88")]),v._v(" "),_("td",[v._v("69.8")]),v._v(" "),_("td",[v._v("71.2")]),v._v(" "),_("td",[v._v("80.8")]),v._v(" "),_("td",[v._v("79.4")]),v._v(" "),_("td",[v._v("84.4")]),v._v(" "),_("td",[v._v("89.8")]),v._v(" "),_("td",[v._v("93.2")]),v._v(" "),_("td",[v._v("99.6")]),v._v(" "),_("td",[v._v("108")])]),v._v(" "),_("tr",[_("td",[v._v("wepy2")]),v._v(" "),_("td",[v._v("121")]),v._v(" "),_("td",[v._v("173.4")]),v._v(" "),_("td",[v._v("213.6")]),v._v(" "),_("td",[v._v("250")]),v._v(" "),_("td",[v._v("298")]),v._v(" "),_("td",[v._v("345.6")]),v._v(" "),_("td",[v._v("383")]),v._v(" "),_("td",[v._v("434.8")]),v._v(" "),_("td",[v._v("476.8")]),v._v(" "),_("td",[v._v("535.6")])]),v._v(" "),_("tr",[_("td",[v._v("uniapp")]),v._v(" "),_("td",[v._v("135.4")]),v._v(" "),_("td",[v._v("112.4")]),v._v(" "),_("td",[v._v("110.6")]),v._v(" "),_("td",[v._v("106.4")]),v._v(" "),_("td",[v._v("109.6")]),v._v(" "),_("td",[v._v("107.2")]),v._v(" "),_("td",[v._v("114.4")]),v._v(" "),_("td",[v._v("116")]),v._v(" "),_("td",[v._v("118.8")]),v._v(" "),_("td",[v._v("117.4")])]),v._v(" "),_("tr",[_("td",[v._v("mpx")]),v._v(" "),_("td",[v._v("112.6")]),v._v(" "),_("td",[v._v("86.2")]),v._v(" "),_("td",[v._v("84.6")]),v._v(" "),_("td",[v._v("86.8")]),v._v(" "),_("td",[v._v("90")]),v._v(" "),_("td",[v._v("87.2")]),v._v(" "),_("td",[v._v("91.2")]),v._v(" "),_("td",[v._v("88.8")]),v._v(" "),_("td",[v._v("92.4")]),v._v(" "),_("td",[v._v("93.4")])]),v._v(" "),_("tr",[_("td",[v._v("chameleon")]),v._v(" "),_("td",[v._v("178.4")]),v._v(" "),_("td",[v._v("178.2")]),v._v(" "),_("td",[v._v("186.4")]),v._v(" "),_("td",[v._v("184.6")]),v._v(" "),_("td",[v._v("192.6")]),v._v(" "),_("td",[v._v("203.8")]),v._v(" "),_("td",[v._v("210")]),v._v(" "),_("td",[v._v("217.6")]),v._v(" "),_("td",[v._v("232.6")]),v._v(" "),_("td",[v._v("236.8")])]),v._v(" "),_("tr",[_("td",[v._v("mpvue")]),v._v(" "),_("td",[v._v("139")]),v._v(" "),_("td",[v._v("151")]),v._v(" "),_("td",[v._v("173.4")]),v._v(" "),_("td",[v._v("194")]),v._v(" "),_("td",[v._v("231.4")]),v._v(" "),_("td",[v._v("258.8")]),v._v(" "),_("td",[v._v("303.4")]),v._v(" "),_("td",[v._v("340.4")]),v._v(" "),_("td",[v._v("384.6")]),v._v(" "),_("td",[v._v("429.4")])]),v._v(" "),_("tr",[_("td",[v._v("kbone")]),v._v(" "),_("td",[v._v("559.8")]),v._v(" "),_("td",[v._v("746.6")]),v._v(" "),_("td",[v._v("980.6")]),v._v(" "),_("td",[v._v("1226.8")]),v._v(" "),_("td",[v._v("1450.6")]),v._v(" "),_("td",[v._v("1705.4")]),v._v(" "),_("td",[v._v("1927.2")]),v._v(" "),_("td",[v._v("2154.8")]),v._v(" "),_("td",[v._v("2367.8")]),v._v(" "),_("td",[v._v("2617")])]),v._v(" "),_("tr",[_("td",[v._v("taro next")]),v._v(" "),_("td",[v._v("482.6")]),v._v(" "),_("td",[v._v("626.2")]),v._v(" "),_("td",[v._v("755")]),v._v(" "),_("td",[v._v("909.6")]),v._v(" "),_("td",[v._v("1085")]),v._v(" "),_("td",[v._v("1233.2")]),v._v(" "),_("td",[v._v("1384")]),v._v(" "),_("td",[v._v("1568.6")]),v._v(" "),_("td",[v._v("1740.6")]),v._v(" "),_("td",[v._v("1883.8")])])])]),v._v(" "),_("p",[v._v("然后按下表操作顺序逐项点击统计")]),v._v(" "),_("table",[_("thead",[_("tr",[_("th"),v._v(" "),_("th",[v._v("delete(all)")]),v._v(" "),_("th",[v._v("add(1000)")]),v._v(" "),_("th",[v._v("update(1)")]),v._v(" "),_("th",[v._v("update(all)")]),v._v(" "),_("th",[v._v("delete(1)")])])]),v._v(" "),_("tbody",[_("tr",[_("td",[v._v("native")]),v._v(" "),_("td",[v._v("43.4")]),v._v(" "),_("td",[v._v("299.8")]),v._v(" "),_("td",[v._v("89.2")]),v._v(" "),_("td",[v._v("89")]),v._v(" "),_("td",[v._v("87.2")])]),v._v(" "),_("tr",[_("td",[v._v("wepy2")]),v._v(" "),_("td",[v._v("43.2")]),v._v(" "),_("td",[v._v("762.4")]),v._v(" "),_("td",[v._v("50")]),v._v(" "),_("td",[v._v("533")]),v._v(" "),_("td",[v._v("522.4")])]),v._v(" "),_("tr",[_("td",[v._v("uniapp")]),v._v(" "),_("td",[v._v("57.8")]),v._v(" "),_("td",[v._v("589.8")]),v._v(" "),_("td",[v._v("62.6")]),v._v(" "),_("td",[v._v("160.6")]),v._v(" "),_("td",[v._v("154.4")])]),v._v(" "),_("tr",[_("td",[v._v("mpx")]),v._v(" "),_("td",[v._v("45.8")]),v._v(" "),_("td",[v._v("490.8")]),v._v(" "),_("td",[v._v("52.8")]),v._v(" "),_("td",[v._v("167")]),v._v(" "),_("td",[v._v("166")])]),v._v(" "),_("tr",[_("td",[v._v("chameleon")]),v._v(" "),_("td",[v._v("93.8")]),v._v(" "),_("td",[v._v("837")]),v._v(" "),_("td",[v._v("184.6")]),v._v(" "),_("td",[v._v("318")]),v._v(" "),_("td",[v._v("220.8")])]),v._v(" "),_("tr",[_("td",[v._v("mpvue")]),v._v(" "),_("td",[v._v("124.8")]),v._v(" "),_("td",[v._v("696.2")]),v._v(" "),_("td",[v._v("423.4")]),v._v(" "),_("td",[v._v("419")]),v._v(" "),_("td",[v._v("430.6")])]),v._v(" "),_("tr",[_("td",[v._v("kbone")]),v._v(" "),_("td",[v._v("121.4")]),v._v(" "),_("td",[v._v("4978.2")]),v._v(" "),_("td",[v._v("2331.2")]),v._v(" "),_("td",[v._v("2448.4")]),v._v(" "),_("td",[v._v("2348")])]),v._v(" "),_("tr",[_("td",[v._v("taro next")]),v._v(" "),_("td",[v._v("129.8")]),v._v(" "),_("td",[v._v("3947.2")]),v._v(" "),_("td",[v._v("1610.4")]),v._v(" "),_("td",[v._v("1813.8")]),v._v(" "),_("td",[v._v("2290.2")])])])]),v._v(" "),_("p",[v._v("该项测试的结论为："),_("br"),v._v("\nnative > mpx > uniapp > chameleon > mpvue > wepy2 > taro next > kbone")]),v._v(" "),_("p",[v._v("结论分析：")]),v._v(" "),_("ul",[_("li",[v._v("具备模板数据跟踪能力的三个框架mpx，kbone和taro next在有后台数据场景下耗时并没有显著增加；")]),v._v(" "),_("li",[v._v("wepy2当中的diff精度不足，耗时也没有产生明显变化；")]),v._v(" "),_("li",[v._v("其余框架由于每次更新都会对后台数据进行deep diff，耗时都产生了一定提升。")])]),v._v(" "),_("h3",{attrs:{id:"页面更新耗时-大数据量场景"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#页面更新耗时-大数据量场景"}},[v._v("#")]),v._v(" 页面更新耗时(大数据量场景)")]),v._v(" "),_("blockquote",[_("p",[v._v("由于mpvue和taro next的渲染全部在页面中进行，而kbone的渲染方案会额外新增大量的自定义组件，这三个框架都会在优惠券数量达到2000时崩溃白屏，我们排除了这三个框架对其余框架进行大数据量场景下的页面更新耗时测试")])]),v._v(" "),_("p",[v._v("首先还是在无后台数据场景下使用"),_("code",[v._v("新增可用券(1000)")]),v._v("将可用券数量递增至5000：")]),v._v(" "),_("table",[_("thead",[_("tr",[_("th"),v._v(" "),_("th",[v._v("1000")]),v._v(" "),_("th",[v._v("2000")]),v._v(" "),_("th",[v._v("3000")]),v._v(" "),_("th",[v._v("4000")]),v._v(" "),_("th",[v._v("5000")])])]),v._v(" "),_("tbody",[_("tr",[_("td",[v._v("native")]),v._v(" "),_("td",[v._v("332.6")]),v._v(" "),_("td",[v._v("350")]),v._v(" "),_("td",[v._v("412.6")]),v._v(" "),_("td",[v._v("498.2")]),v._v(" "),_("td",[v._v("569.4")])]),v._v(" "),_("tr",[_("td",[v._v("wepy2")]),v._v(" "),_("td",[v._v("970.2")]),v._v(" "),_("td",[v._v("1531.4")]),v._v(" "),_("td",[v._v("2015.2")]),v._v(" "),_("td",[v._v("2890.6")]),v._v(" "),_("td",[v._v("3364.2")])]),v._v(" "),_("tr",[_("td",[v._v("uniapp")]),v._v(" "),_("td",[v._v("655.2")]),v._v(" "),_("td",[v._v("593.4")]),v._v(" "),_("td",[v._v("655")]),v._v(" "),_("td",[v._v("675.6")]),v._v(" "),_("td",[v._v("718.8")])]),v._v(" "),_("tr",[_("td",[v._v("mpx")]),v._v(" "),_("td",[v._v("532.2")]),v._v(" "),_("td",[v._v("496")]),v._v(" "),_("td",[v._v("548.6")]),v._v(" "),_("td",[v._v("564")]),v._v(" "),_("td",[v._v("601.8")])]),v._v(" "),_("tr",[_("td",[v._v("chameleon")]),v._v(" "),_("td",[v._v("805.4")]),v._v(" "),_("td",[v._v("839.6")]),v._v(" "),_("td",[v._v("952.8")]),v._v(" "),_("td",[v._v("1086.6")]),v._v(" "),_("td",[v._v("1291.8")])])])]),v._v(" "),_("p",[v._v("然后点击"),_("code",[v._v("新增不可用券(5000)")]),v._v("将后台数据量增加至5000，再测试可用券数量递增至5000的耗时：")]),v._v(" "),_("table",[_("thead",[_("tr",[_("th"),v._v(" "),_("th",[v._v("back add(5000)")])])]),v._v(" "),_("tbody",[_("tr",[_("td",[v._v("native")]),v._v(" "),_("td",[v._v("117.4")])]),v._v(" "),_("tr",[_("td",[v._v("wepy2")]),v._v(" "),_("td",[v._v("511.6")])]),v._v(" "),_("tr",[_("td",[v._v("uniapp")]),v._v(" "),_("td",[v._v("285")])]),v._v(" "),_("tr",[_("td",[v._v("mpx")]),v._v(" "),_("td",[v._v("0")])]),v._v(" "),_("tr",[_("td",[v._v("chameleon")]),v._v(" "),_("td",[v._v("824")])])])]),v._v(" "),_("table",[_("thead",[_("tr",[_("th"),v._v(" "),_("th",[v._v("1000")]),v._v(" "),_("th",[v._v("2000")]),v._v(" "),_("th",[v._v("3000")]),v._v(" "),_("th",[v._v("4000")]),v._v(" "),_("th",[v._v("5000")])])]),v._v(" "),_("tbody",[_("tr",[_("td",[v._v("native")]),v._v(" "),_("td",[v._v("349.8")]),v._v(" "),_("td",[v._v("348.4")]),v._v(" "),_("td",[v._v("430.4")]),v._v(" "),_("td",[v._v("497")]),v._v(" "),_("td",[v._v("594.8")])]),v._v(" "),_("tr",[_("td",[v._v("wepy2")]),v._v(" "),_("td",[v._v("1128")]),v._v(" "),_("td",[v._v("1872")]),v._v(" "),_("td",[v._v("2470.4")]),v._v(" "),_("td",[v._v("3263.4")]),v._v(" "),_("td",[v._v("4075.8")])]),v._v(" "),_("tr",[_("td",[v._v("uniapp")]),v._v(" "),_("td",[v._v("715")]),v._v(" "),_("td",[v._v("666.8")]),v._v(" "),_("td",[v._v("709.2")]),v._v(" "),_("td",[v._v("755.6")]),v._v(" "),_("td",[v._v("810.2")])]),v._v(" "),_("tr",[_("td",[v._v("mpx")]),v._v(" "),_("td",[v._v("538.8")]),v._v(" "),_("td",[v._v("501.8")]),v._v(" "),_("td",[v._v("562.6")]),v._v(" "),_("td",[v._v("573.6")]),v._v(" "),_("td",[v._v("595.2")])]),v._v(" "),_("tr",[_("td",[v._v("chameleon")]),v._v(" "),_("td",[v._v("1509.2")]),v._v(" "),_("td",[v._v("1672.4")]),v._v(" "),_("td",[v._v("1951.8")]),v._v(" "),_("td",[v._v("2232.4")]),v._v(" "),_("td",[v._v("2586.2")])])])]),v._v(" "),_("p",[v._v("该项测试的结论为："),_("br"),v._v("\nnative > mpx > uniapp > chameleon > wepy2")]),v._v(" "),_("p",[v._v("结论分析：")]),v._v(" "),_("ul",[_("li",[v._v("在大数据量场景下，框架之间基础性能的差异会变得更加明显，mpx和uniapp依然保持了接近原生的良好性能表现，而chameleon和wepy2则产生了比较显著的性能劣化。")])]),v._v(" "),_("h3",{attrs:{id:"局部更新耗时"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#局部更新耗时"}},[v._v("#")]),v._v(" 局部更新耗时")]),v._v(" "),_("p",[v._v("我们在可用券数量为1000的情况下，点击任意一张可用券触发选中状态，以测试局部更新性能")]),v._v(" "),_("table",[_("thead",[_("tr",[_("th"),v._v(" "),_("th",[v._v("toggleSelect(ms)")])])]),v._v(" "),_("tbody",[_("tr",[_("td",[v._v("native")]),v._v(" "),_("td",[v._v("2")])]),v._v(" "),_("tr",[_("td",[v._v("wepy2")]),v._v(" "),_("td",[v._v("2.6")])]),v._v(" "),_("tr",[_("td",[v._v("uniapp")]),v._v(" "),_("td",[v._v("2.8")])]),v._v(" "),_("tr",[_("td",[v._v("mpx")]),v._v(" "),_("td",[v._v("2.2")])]),v._v(" "),_("tr",[_("td",[v._v("chameleon")]),v._v(" "),_("td",[v._v("2")])]),v._v(" "),_("tr",[_("td",[v._v("mpvue")]),v._v(" "),_("td",[v._v("289.6")])]),v._v(" "),_("tr",[_("td",[v._v("kbone")]),v._v(" "),_("td",[v._v("2440.8")])]),v._v(" "),_("tr",[_("td",[v._v("taro next")]),v._v(" "),_("td",[v._v("1975")])])])]),v._v(" "),_("p",[v._v("该项测试的结论为："),_("br"),v._v("\nnative ≈ chameleon ≈ mpx ≈ wepy2 ≈ uniapp > mpvue > taro next > kbone")]),v._v(" "),_("p",[v._v("结论分析：")]),v._v(" "),_("ul",[_("li",[v._v("可以看出所有使用了原生自定义组件进行组件化实现的框架局部更新耗时都极低，这足以证明小程序原生自定义组件的优秀性和重要性；")]),v._v(" "),_("li",[v._v("mpvue由于使用了页面更新，局部更新耗时显著增加；")]),v._v(" "),_("li",[v._v("kbone和taro next由于递归动态渲染的性能开销巨大，导致局部更新耗时同样巨大。")])]),v._v(" "),_("h3",{attrs:{id:"setdata调用"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#setdata调用"}},[v._v("#")]),v._v(" setData调用")]),v._v(" "),_("p",[v._v("我们将"),_("code",[v._v("proxySetData")]),v._v("的count和size选项设置为true，开启setData的次数和体积统计，重新构建后按照以下流程执行系列操作，并统计setData的调用次数和发送数据的体积。")]),v._v(" "),_("p",[v._v("操作流程如下：")]),v._v(" "),_("ol",[_("li",[v._v("100逐级递增可用券(0->500)")]),v._v(" "),_("li",[v._v("切换至不可用券")]),v._v(" "),_("li",[v._v("新增不可用券(1000)")]),v._v(" "),_("li",[v._v("100逐级递增可用券(500->1000)")]),v._v(" "),_("li",[v._v("更新可用券(all)")]),v._v(" "),_("li",[v._v("切换至可用券")])]),v._v(" "),_("p",[v._v("操作完成后我们使用"),_("code",[v._v("getCount")]),v._v("和"),_("code",[v._v("getSize")]),v._v("方法获取累积的setData调用次数和数据体积，其中数据体积计算方式为JSON.stringify后按照utf-8编码方式进行体积计算，统计结果为：")]),v._v(" "),_("table",[_("thead",[_("tr",[_("th"),v._v(" "),_("th",[v._v("count")]),v._v(" "),_("th",[v._v("size(KB)")])])]),v._v(" "),_("tbody",[_("tr",[_("td",[v._v("native")]),v._v(" "),_("td",[v._v("14")]),v._v(" "),_("td",[v._v("803")])]),v._v(" "),_("tr",[_("td",[v._v("wepy2")]),v._v(" "),_("td",[v._v("3514")]),v._v(" "),_("td",[v._v("1124")])]),v._v(" "),_("tr",[_("td",[v._v("mpvue")]),v._v(" "),_("td",[v._v("16")]),v._v(" "),_("td",[v._v("2127")])]),v._v(" "),_("tr",[_("td",[v._v("uniapp")]),v._v(" "),_("td",[v._v("14")]),v._v(" "),_("td",[v._v("274")])]),v._v(" "),_("tr",[_("td",[v._v("mpx")]),v._v(" "),_("td",[v._v("8")]),v._v(" "),_("td",[v._v("261")])]),v._v(" "),_("tr",[_("td",[v._v("chameleon")]),v._v(" "),_("td",[v._v("2515")]),v._v(" "),_("td",[v._v("319")])]),v._v(" "),_("tr",[_("td",[v._v("kbone")]),v._v(" "),_("td",[v._v("22")]),v._v(" "),_("td",[v._v("10572")])]),v._v(" "),_("tr",[_("td",[v._v("taro next")]),v._v(" "),_("td",[v._v("9")]),v._v(" "),_("td",[v._v("2321")])])])]),v._v(" "),_("p",[v._v("该项测试的结论为："),_("br"),v._v("\nmpx > uniapp > native > chameleon > wepy2 > taro next > mpvue > kbone")]),v._v(" "),_("p",[v._v("结论分析：")]),v._v(" "),_("ul",[_("li",[v._v("mpx框架成功实现了理论上setData的最优；")]),v._v(" "),_("li",[v._v("uniapp由于缺失模板追踪能力紧随其后；")]),v._v(" "),_("li",[v._v("chameleon由于组件每次创建时都会进行一次不必要的setData，产生了大量无效setData调用，但是数据的发送本身经过diff，在数据发送量上表现不错；")]),v._v(" "),_("li",[v._v("wepy2的组件会在数据更新时调用setData发送已经更新过的props数据，因此也产生了大量无效调用，且diff精度不足，发送的数据量也较大；")]),v._v(" "),_("li",[v._v("taro next由于上层完全基于vue，在数据发送次数上控制到了9次，但由于需要发送大量的dom描述信息，数据发送量较大；")]),v._v(" "),_("li",[v._v("mpvue由于使用较长的数据路径描述数据对应的组件，也产生了较大的数据发送量；")]),v._v(" "),_("li",[v._v("kbone对于setData的调用控制得不是很好，在上层运行vue的情况依然进行了22次数据发送，且发送的数据量巨大，在此流程中达到了惊人的10MB。")])]),v._v(" "),_("h3",{attrs:{id:"页面渲染耗时-静态测试"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#页面渲染耗时-静态测试"}},[v._v("#")]),v._v(" 页面渲染耗时(静态测试)")]),v._v(" "),_("p",[v._v("此处的页面渲染耗时与前面描述的动态测试场景中相同，测试结果如下：")]),v._v(" "),_("table",[_("thead",[_("tr",[_("th"),v._v(" "),_("th",[v._v("页面渲染耗时")])])]),v._v(" "),_("tbody",[_("tr",[_("td",[v._v("native")]),v._v(" "),_("td",[v._v("70.4")])]),v._v(" "),_("tr",[_("td",[v._v("wepy2")]),v._v(" "),_("td",[v._v("86.6")])]),v._v(" "),_("tr",[_("td",[v._v("mpvue")]),v._v(" "),_("td",[v._v("115.2")])]),v._v(" "),_("tr",[_("td",[v._v("uniapp")]),v._v(" "),_("td",[v._v("69.6")])]),v._v(" "),_("tr",[_("td",[v._v("mpx")]),v._v(" "),_("td",[v._v("66.6")])]),v._v(" "),_("tr",[_("td",[v._v("chameleon")]),v._v(" "),_("td",[v._v("65")])]),v._v(" "),_("tr",[_("td",[v._v("kbone")]),v._v(" "),_("td",[v._v("144.2")])]),v._v(" "),_("tr",[_("td",[v._v("taro next")]),v._v(" "),_("td",[v._v("119.8")])])])]),v._v(" "),_("p",[v._v("该项测试的结论为："),_("br"),v._v("\nchameleon ≈ mpx ≈ uniapp ≈ native > wepy2 > mpvue ≈ taro next > kbone")]),v._v(" "),_("p",[v._v("结论分析：")]),v._v(" "),_("ul",[_("li",[v._v("除了kbone和taro next采用动态渲染耗时增加，mpvue使用页面模板渲染性能稍差，其余框架的静态页面渲染表现都和原生差不多。")])]),v._v(" "),_("h2",{attrs:{id:"结论"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#结论"}},[v._v("#")]),v._v(" 结论")]),v._v(" "),_("p",[v._v("综合上述测试数据，我们得到最终的小程序框架运行时性能排名为："),_("br"),v._v("\nmpx > uniapp > chameleon > wepy2 > mpvue > taro next > kbone")]),v._v(" "),_("h2",{attrs:{id:"一点私货"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#一点私货"}},[v._v("#")]),v._v(" 一点私货")]),v._v(" "),_("p",[v._v("虽然kbone和taro next采用了动态渲染技术在性能表现上并不尽如人意，但是我依然认为这是很棒的技术方案。虽然本文从头到位都在进行性能测试和对比，但性能并不是框架的全部，开发效率和高可用性仍然是框架的重心，开发效率相信是所有框架设计的初衷，但是高可用性却在很大程度被忽视。从这个角度来说，kbone和taro next是非常成功的，不同于过去的转译思路，这种从抹平底层渲染环境的做法能够使上层web框架完整运行，在框架可用性上带来非常大的提升，非常适合于运营类简单小程序的迁移和开发。")]),v._v(" "),_("p",[v._v("我主导开发的mpx框架(https://github.com/didi/mpx) 选择了另一条道路解决可用性问题，那就是基于小程序原生语法能力进行增强，这样既能避免转译web框架时带来的不确定性和不稳定性，同时也能带来非常接近于原生的性能表现，对于复杂业务小程序的开发者来说，非常推荐使用。在跨端输出方面，mpx目前能够完善支持业内全部小程序平台和web平台的同构输出，滴滴内部最重要最复杂的小程序——滴滴出行小程序完全基于mpx进行开发，并利用框架提供的跨端能力对微信和支付宝入口进行同步业务迭代，大大提升了业务开发效率。")])])}),[],!1,null,null,null);_.default=e.exports}}]);