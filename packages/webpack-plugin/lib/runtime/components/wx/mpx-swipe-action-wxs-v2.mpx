<template>
  <wxs module="swipeHandler">
// 全局状态
var state = {
  startX: 0,
  currentX: 0,
  isDragging: false,
  isOpened: false,
  actionWidth: 0
}

// 设置样式的辅助函数
function setTransform(ownerInstance, x, useAnimation) {
  if (!ownerInstance) return
  
  var transform = 'translateX(' + x + 'px)'
  var transition = useAnimation ? 'transform 0.3s ease' : 'none'
  
  console.log('WXS setTransform:', x, useAnimation, transform, transition)
  ownerInstance.setStyle({
    'transform': transform,
    'transition': transition
  })
}

// 触摸开始
function touchStart(event, ownerInstance) {
  console.log('WXS: touchStart')
  
  if (!event || !event.touches || event.touches.length === 0) {
    return false
  }
  
  var touch = event.touches[0]
  var dataset = event.target.dataset || event.currentTarget.dataset
  
  // 初始化状态
  state.startX = touch.clientX
  state.isDragging = true
  state.isOpened = dataset.opened === true
  state.actionWidth = parseInt(dataset.actionWidth) || 80
  
  // 初始化 currentX 为当前实际位置
  state.currentX = state.isOpened ? -state.actionWidth : 0
  
  // 直接设置样式
  var instance = ownerInstance.selectComponent('.swipe-content')
  setTransform(instance, state.currentX, false)
  return true
}

// 触摸移动
function touchMove(event, ownerInstance) {
  if (!state.isDragging) {
    return false
  }
  
  if (!event || !event.touches || event.touches.length === 0) {
    return false
  }
  
  var currentX = event.touches[0].clientX
  var deltaX = state.startX - currentX  // 向左滑动为正值
  
  // 跟手滑动效果
  if (state.isOpened) {
    // 当前是打开状态，允许向右滑动关闭
    if (deltaX <= 0) {
      // 向右滑动，从完全打开位置开始
      var slideBack = Math.abs(deltaX)
      var maxSlideBack = state.actionWidth
      var actualSlide = Math.min(slideBack, maxSlideBack)
      state.currentX = -state.actionWidth + actualSlide
    } else {
      // 向左滑动，保持在完全打开位置
      state.currentX = -state.actionWidth
    }
  } else {
    // 当前是关闭状态，允许向左滑动打开
    if (deltaX >= 0) {
      // 向左滑动，限制最大滑动距离
      var maxSlide = state.actionWidth
      var actualSlide = Math.min(deltaX, maxSlide)
      state.currentX = -actualSlide
    } else {
      // 向右滑动，保持在关闭位置
      state.currentX = 0
    }
  }
  
  console.log('WXS: touchMove - deltaX:', deltaX, 'isOpened:', state.isOpened, 'currentX:', state.currentX)
  
  // 直接设置样式
  var instance = ownerInstance.selectComponent('.swipe-content')
  setTransform(instance, state.currentX, false)
  
  return true
}

// 触摸结束
function touchEnd(event, ownerInstance) {
  if (!state.isDragging) {
    return false
  }
  
  state.isDragging = false
  
  // 根据当前状态和滑动距离决定最终状态
  var currentSlideDistance = Math.abs(state.currentX)
  var threshold = state.actionWidth * 0.3  // 默认阈值设为30%
  var targetX = 0
  var willOpen = false
  
  if (state.isOpened) {
    // 当前是打开状态，判断是否要关闭
    var closedDistance = state.actionWidth - currentSlideDistance  // 已经关闭的距离
    var closeThreshold = state.actionWidth * 0.2  // 关闭阈值设置为20%
    
    if (closedDistance >= closeThreshold) {
      // 向右滑动超过20%，关闭
      targetX = 0
      willOpen = false
    } else {
      // 未超过关闭阈值，保持打开
      targetX = -state.actionWidth
      willOpen = true
    }
  } else {
    // 当前是关闭状态，判断是否要打开
    if (currentSlideDistance >= threshold) {
      // 向左滑动超过阈值，打开
      targetX = -state.actionWidth
      willOpen = true
    } else {
      // 未超过阈值，保持关闭
      targetX = 0
      willOpen = false
    }
  }
  
  console.log('WXS: touchEnd - currentX:', state.currentX, 'currentSlideDistance:', currentSlideDistance, 'threshold:', threshold, 'targetX:', targetX, 'willOpen:', willOpen, 'wasOpened:', state.isOpened)
  
  // 更新状态
  state.isOpened = willOpen
  state.currentX = targetX
  
  // 直接设置样式，重新开启动画
  var instance = ownerInstance.selectComponent('.swipe-content')
  if (instance) {
    setTransform(instance, targetX, true)
  } else {
    setTransform(ownerInstance, targetX, true)
  }
  
  // 调用状态更新方法
  if (ownerInstance && ownerInstance.callMethod) {
    ownerInstance.callMethod('updateOpenState', {
      isOpened: willOpen
    })
  }
  
  return true
}

// 导出模块
module.exports = {
  touchStart: touchStart,
  touchMove: touchMove,
  touchEnd: touchEnd
}
  </wxs>

  <view class="mpx-swipe-action">
    <!-- 主内容区域 -->
    <view 
      class="swipe-content"
      style="{{contentStyle}}"
      bindtouchstart="{{swipeHandler.touchStart}}"
      catchtouchmove="{{swipeHandler.touchMove}}"
      bindtouchend="{{swipeHandler.touchEnd}}"
      data-opened="{{isOpened}}"
      data-action-width="{{totalActionWidth}}"
    >
      <view 
        class="content-area" 
        bindtap="handleContentTap"
      >
        <slot></slot>
      </view>
      
      <!-- 右侧操作按钮区域 -->
      <view 
        class="action-area" 
        style="width: {{totalActionWidth}}px; right: -{{totalActionWidth}}px;"
      >
        <view 
          wx:for="{{finalActions}}" 
          wx:key="index"
          class="action-button"
          style="width: {{item.width || actionWidth}}px; background-color: {{item.background || item.color || '#ff4757'}}; color: {{item.textColor || '#fff'}}; font-size: {{item.fontSize || 16}}px; font-weight: {{item.fontWeight || '500'}}; {{item.style || ''}}"
          bindtap="handleActionTap"
          data-index="{{index}}"
          data-action="{{item}}"
        >{{item.text}}</view>
      </view>
    </view>
  </view>
</template>

<script>
import { createComponent } from '@mpxjs/core'

// 全局状态管理，用于自动关闭其他已打开的组件
const openedInstances = new Set()

createComponent({
  properties: {
    // 单按钮配置（向后兼容）
    actionWidth: {
      type: Number,
      value: 80
    },
    actionColor: {
      type: String,
      value: '#ff4757'
    },
    actionText: {
      type: String,
      value: '删除'
    },
    actionTextColor: {
      type: String,
      value: '#fff'
    },
    actionBackground: {
      type: String,
      value: ''
    },
    actionFontSize: {
      type: Number,
      value: 16
    },
    actionFontWeight: {
      type: String,
      value: '500'
    },
    actionStyle: {
      type: String,
      value: ''
    },
    // 多按钮配置
    actions: {
      type: Array,
      value: []
    },
    rightThreshold: {
      type: Number,
      value: 0
    },
    disabled: {
      type: Boolean,
      value: false
    },
    autoClose: {
      type: Boolean,
      value: true
    }
  },

  data: {
    isOpened: false,
    contentStyle: ''
  },

  computed: {
    // 处理多按钮配置，优先使用 actions，否则使用单按钮配置
    finalActions() {
      if (this.actions && this.actions.length > 0) {
        return this.actions
      }
      return [{
        text: this.actionText,
        color: this.actionColor,
        textColor: this.actionTextColor,
        background: this.actionBackground,
        width: this.actionWidth,
        fontSize: this.actionFontSize,
        fontWeight: this.actionFontWeight,
        style: this.actionStyle
      }]
    },

    totalActionWidth() {
      return this.finalActions.reduce((sum, action) => {
        return sum + (action.width || this.actionWidth)
      }, 0)
    }
  },

  attached() {
    this.initializeComponent()
  },

  ready() {
    this.initializeComponent()
  },

  detached() {
    // 组件销毁时清理
    this.unregisterInstance()
  },

  methods: {
    // 初始化组件
    initializeComponent() {
      this.setData({
        isOpened: false,
        contentStyle: 'transform: translateX(0px); transition: none;'
      })
    },

    // WXS 调用的更新打开状态方法
    updateOpenState(detail) {
      const { isOpened } = detail
      const wasOpened = this.isOpened
      
      console.log('JS: updateOpenState', isOpened, wasOpened)
      
      this.setData({
        isOpened: isOpened
      })
      
      // 触发相应事件
      if (isOpened && !wasOpened) {
        this.triggerEvent('open', {
          actionWidth: this.totalActionWidth,
          actions: this.finalActions,
          actionCount: this.finalActions.length
        })
        
        if (this.autoClose) {
          this.closeOtherInstances()
          this.registerInstance()
        }
      } else if (!isOpened && wasOpened) {
        this.triggerEvent('close', {})
        
        if (this.autoClose) {
          this.unregisterInstance()
        }
      }
    },

    // 吸附到打开状态 - 统一使用 contentStyle
    snapToOpen() {
      this.setData({
        isOpened: true,
        contentStyle: `transform: translateX(-${this.totalActionWidth}px); transition: transform 0.3s ease;`
      })
      this.updateOpenState({ isOpened: true })
    },

    // 吸附到关闭状态 - 统一使用 contentStyle  
    snapToClose() {
      this.setData({
        isOpened: false,
        contentStyle: 'transform: translateX(0px); transition: transform 0.3s ease;'
      })
      this.updateOpenState({ isOpened: false })
    },

    // 打开操作区域（编程式调用）
    openActions() {
      this.snapToOpen()
    },

    // 关闭操作区域（编程式调用）
    closeActions() {
      this.snapToClose()
    },

    // 处理内容区域点击
    handleContentTap(e) {
      console.log('JS: handleContentTap - isOpened:', this.isOpened)
      // 如果已打开，则关闭
      if (this.isOpened) {
        console.log('JS: Closing actions via click')
        this.closeActions()
      } else {
        // 透传点击事件
        this.triggerEvent('tap', e.detail)
      }
    },

    // 处理操作按钮点击
    handleActionTap(e) {
      const { index, action } = e.currentTarget.dataset
      
      this.triggerEvent('actiontap', {
        actionIndex: index,
        actionText: action.text,
        actionWidth: action.width || this.actionWidth,
        action: action
      })
      
      // 点击操作按钮后自动关闭
      this.closeActions()
    },

    // 注册实例
    registerInstance() {
      if (this.autoClose) {
        openedInstances.add(this)
      }
    },

    // 注销实例
    unregisterInstance() {
      openedInstances.delete(this)
    },

    // 关闭其他已打开的实例
    closeOtherInstances() {
      if (this.autoClose) {
        openedInstances.forEach(instance => {
          if (instance !== this) {
            instance.closeActions()
          }
        })
      }
    },

    // 暴露给外部的方法
    open() {
      this.openActions()
    },

    close() {
      this.closeActions()
    }
  }
})
</script>

<style>
.mpx-swipe-action {
  position: relative;
  width: 100%;
  overflow: hidden;
}

.swipe-content {
  display: flex;
  width: 100%;
  height: 100%;
  position: relative;
}

.content-area {
  width: 100%; 
  height: 100%;
  background: #fff;
  flex-shrink: 0;
}

.action-area {
  display: flex;
  height: 100%; 
  flex-shrink: 0;
  position: absolute;
  top: 0;
}

.action-button {
  height: 100%;
  display: flex;
  align-items: center;
  justify-content: center;
  box-sizing: border-box;
}
</style>

<script type="application/json">
{
  "component": true
}
</script>
