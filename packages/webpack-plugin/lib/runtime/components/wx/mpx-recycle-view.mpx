<template>
  <scroll-view
    wx:ref="recycleViewRef"
    class="mpx-recycle-view"
    scroll-y
    wx:style="{{scrollViewStyle}}"
    type="custom"
    enhanced="{{true}}"
    scroll-with-animation="{{scrollWithAnimation}}"
    bounces="{{bounces}}"
    show-scrollbar="{{showScrollbar}}"
    refresher-enabled="{{refresherEnabled}}"
    refresher-triggered="{{refresherTriggered}}"
    bindscroll="onScroll"
    bindrefresherrefresh="onRefresh"
  >
    <block wx:for="{{convertedListData}}" wx:key="index">
      <!-- section header -->
      <block wx:if="{{type === 'section'}}">
        <sticky-section>
          <sticky-header wx:if="{{enableSticky && item.hasSectionHeader}}">
            <section-header itemData="{{item.headerData}}"></section-header>
          </sticky-header>
          <section-header
            wx:if="{{!enableSticky && item.hasSectionHeader}}"
            itemData="{{item}}"
          ></section-header>

          <list-view>
            <block
              wx:if="{{mpxGenericRecycleItem}}"
              wx:for="{{item.data}}"
              wx:for-item="subItem"
              wx:key="subIndex"
            >
              <!-- section items -->
              <recycle-item itemData="{{subItem}}"></recycle-item>
            </block>
          </list-view>
        </sticky-section>
      </block>
      <block wx:if="{{mpxGenericRecycleItem}}">
        <!-- section items -->
        <recycle-item itemData="{{item}}"></recycle-item>
      </block>
    </block>
  </scroll-view>
</template>

<script>
  import mpx, { createComponent } from '@mpxjs/core'

  createComponent({
    properties: {
      height: {
        type: Number,
        value: 0
      },
      width: {
        type: Number,
        value: 0
      },
      listData: {
        type: Array,
        value: []
      },
      type: {
        type: String,
        value: ''
      },
      mpxGenericRecycleItem: String,
      mpxGenericSectionHeader: String,
      mpxGenericSectionFooter: String,
      mpxGenericListHeader: String,
      mpxGenericListFooter: String,
      scrollWithAnimation: Boolean,
      enableSticky: {
        type: Boolean,
        value: false
      },
      showScrollbar: {
        type: Boolean,
        value: false
      },
      enhanced: {
        type: Boolean,
        value: false
      },
      bounces: {
        type: Boolean,
        value: false
      },
      refresherEnable: {
        type: Boolean,
        value: false
      },
      refresherEnabled: {
        type: Boolean,
        value: false
      }
    },
    data: {
      convertedListData: []
    },
    computed: {
      scrollViewStyle() {
        return `height: ${this.height}px;width: ${this.width}px`
      }
    },
    watch: {
      listData: {
        handler(newVal) {
          if (this.type === 'section') {
            this.convertedListData = this.convertToSectionListData(newVal)
          } else {
            this.convertedListData = newVal
          }
        },
        immediate: true
      }
    },
    methods: {
      onScroll(e) {
        this.triggerEvent('scroll', e.detail)
      },
      onRefresh(e) {
        this.triggerEvent('refresh', e.detail)
      },
      scrollToOffset({ offset, animated }) {
        this.$refs.recycleViewRef.node().exec((res) => {
          res[0].node.scrollTo({
            top: offset,
            animated
          })
        })
      },
      convertToSectionListData(data) {
        const sections = []
        let currentSection = null
        // 标记是否已创建了默认section (无header的section)
        let hasDefaultSection = false

        data.forEach((item, index) => {
          if (item.isSectionHeader) {
            // 如果已经存在一个 section，先把它添加到 sections 中
            if (currentSection) {
              sections.push(currentSection)
            }
            // 创建新的 section
            currentSection = {
              headerData: item,
              data: [],
              hasSectionHeader: true
            }
          } else {
            // 如果没有当前 section，创建一个默认的
            if (!currentSection) {
              // 创建默认section (无header的section)
              currentSection = {
                headerData: null,
                data: [],
                hasSectionHeader: false,
                _originalItemIndex: -1
              }
              // 标记已创建默认section
              hasDefaultSection = true
            }
            // 将 item 添加到当前 section 的 data 中
            const itemIndex = currentSection.data.length
            currentSection.data.push({
              ...item,
              _originalItemIndex: index
            })
          }
        })

        // 添加最后一个 section
        if (currentSection) {
          sections.push(currentSection)
        }

        return sections
      }
    }
  })
</script>

<script type="application/json">
  {
    "component": true,
    "componentGenerics": {
      "recycle-item": {
        "default": "./mpx-recycle-item-default.mpx"
      },
      "section-header": {
        "default": "./mpx-section-header-default.mpx"
      }
    }
  }
</script>
